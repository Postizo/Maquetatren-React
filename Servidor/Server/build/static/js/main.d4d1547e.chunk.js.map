{"version":3,"sources":["services/ciudadSrv.ts","entities/ciudad.ts","components/Listaciudades/Ciudad/ComponenteCiudad.tsx","components/Listaciudades/Listaciudad.tsx","serviceWorker.js","index.js"],"names":["ciudadSrv","fetch","method","headers","Headers","then","res","ok","Error","status","statusText","json","data","ciudad","id","Nombre","estadoled","this","ComponenteCiudad","props","state","estadoledload","socket","on","handleMessage","bind","valorLedOnChange","event","Id","setState","console","log","e","mandaciudad","emit","key","type","checked","onChange","React","Component","Listaciudad","Ciudades","io","connect","GetCiudades","nombre1","catch","err","map","isLocalhost","Boolean","window","location","hostname","match","registerValidSW","swUrl","config","navigator","serviceWorker","register","registration","onupdatefound","installingWorker","installing","onstatechange","controller","onUpdate","onSuccess","error","ReactDOM","render","StrictMode","document","getElementById","URL","process","href","origin","addEventListener","response","contentType","get","indexOf","ready","unregister","reload","checkValidServiceWorker"],"mappings":"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","file":"static/js/main.d4d1547e.chunk.js","sourcesContent":["import {ciudad} from '../entities/ciudad'\r\nexport class ciudadSrv {\r\n\r\n    public static GetCiudades(): Promise<ciudad[]> {\r\n        let url: string = 'http://maquetatren.ddns.net:8080/estadoled';\r\n        return fetch(url,\r\n            {\r\n                method: 'GET',\r\n                headers: new Headers({\r\n                    \"Cache-Control\": \"no-cache\",\r\n                    \"Accept\": \"application/json\",\r\n                    \"content-type\": \"application/json\"\r\n                })\r\n            })\r\n            .then(res => {\r\n                if (!res.ok) {\r\n                    throw Error(`${res.status}: ${res.statusText}`);\r\n                }\r\n                return res.json();\r\n            })\r\n            .then((data: ciudad[]) => {\r\n                return data;\r\n            });\r\n    }\r\n\r\n}","export class ciudad {\r\n    public id: number;\r\n    public Nombre: string;\r\n    public estadoled: boolean;\r\n    constructor() { \r\n        this.id =  0;\r\n        this.Nombre=\"\";\r\n        this.estadoled =  false;\r\n        };\r\n}","import React from 'react';\r\nimport { IcomponenteciudadProps } from './IcomponenteciudadProps';\r\nimport { IcomponenteciudadState } from './IcomponenteciudadState';\r\n\r\nimport {ciudad} from '../../../entities/ciudad'\r\nconst EVENT_NAME: string = 'Seccion1';\r\n\r\nexport default class ComponenteCiudad extends React.Component<IcomponenteciudadProps, IcomponenteciudadState> {\r\n    \r\n    constructor(props: IcomponenteciudadProps, state: IcomponenteciudadState) {\r\n        super(props, state);\r\n        this.state = {\r\n            estadoled :props.estadoledload\r\n        };\r\n        this.props.socket.on(EVENT_NAME, this.handleMessage.bind(this));\r\n        this.valorLedOnChange= this.valorLedOnChange.bind(this);\r\n    }\r\n\r\n    handleMessage(event: ciudad): void {  \r\n        if (event.id == this.props.Id)\r\n        {\r\n            this.setState((state,props)=> ({estadoled: event.estadoled})); \r\n            console.log( event.id + ' ' + event.estadoled)    \r\n        }\r\n         \r\n    }\r\n\r\n    valorLedOnChange(e: React.ChangeEvent<HTMLInputElement>)\r\n    {   \r\n        console.log(\"cambia al pulsar\");\r\n        let mandaciudad = new ciudad()\r\n        mandaciudad.Nombre = this.props.Nombre;\r\n        mandaciudad.id =this.props.Id;\r\n        mandaciudad.estadoled = !this.state.estadoled;\r\n        this.handleMessage(mandaciudad);\r\n        this.props.socket.emit(EVENT_NAME, mandaciudad);      \r\n    }\r\n\r\n    render() {\r\n        let CiudadElement  = null;\r\n\r\n        CiudadElement\r\n         = (\r\n            <tr key={this.props.Id}>\r\n                 <td>{this.props.Id}</td>\r\n                <td>{this.props.Nombre}</td>\r\n                <td><input type=\"checkbox\"\r\n                 checked = {this.state.estadoled}\r\n                 onChange = {this.valorLedOnChange}/>\r\n                 \r\n                 </td> \r\n            </tr>\r\n        );\r\n\r\n        return CiudadElement;\r\n    }\r\n}","import React from 'react';\r\nimport { IListaCiudadProps } from './IListaCiudadProps';\r\nimport { IListaCiudadState } from './IListaCiudadState';\r\nimport { ciudadSrv} from '../../services/ciudadSrv';\r\nimport {ciudad} from '../../entities/ciudad';\r\nimport ComponenteCiudad from './Ciudad/ComponenteCiudad'\r\nimport  io from 'socket.io-client';\r\nconst SERVER_URL: string = 'http://maquetatren.ddns.net:8080:8080';\r\n\r\nexport default class Listaciudad extends React.Component<IListaCiudadProps, IListaCiudadState> {\r\n    private socket: SocketIOClient.Socket;\r\n    constructor(props: IListaCiudadProps, state: IListaCiudadState) {\r\n        super(props, state);\r\n        this.state = {\r\n            Ciudades:[]           \r\n        };\r\n        this.socket = io.connect(SERVER_URL);\r\n    }\r\n\r\n    componentWillMount() {\r\n        \r\n        ciudadSrv.GetCiudades().then((data: ciudad[]) => {\r\n            this.setState((state, props) => ({\r\n                nombre1: \"Ignacio 11\",\r\n                Ciudades : data\r\n                }));\r\n        }).catch(err => {\r\n            console.log(err);\r\n        });\r\n    }\r\n\r\n    render() {\r\n        let ListaCiudadesElement  = null;\r\n        ListaCiudadesElement\r\n         = this.state.Ciudades.map(ciudad => {\r\n                return (\r\n                    <div>\r\n                        <ComponenteCiudad socket = {this.socket} Id = {ciudad.id} Nombre = {ciudad.Nombre} estadoledload = {ciudad.estadoled}></ComponenteCiudad>\r\n                    </div>\r\n                )\r\n                })\r\n        return ListaCiudadesElement;\r\n    }\r\n}","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport Listaciudades from './components/Listaciudades/Listaciudad'\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <Listaciudades/>\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.register();\n"],"sourceRoot":""}